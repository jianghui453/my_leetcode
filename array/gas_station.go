//在一条环路上有 N 个加油站，其中第 i 个加油站有汽油 gas[i] 升。
//
//你有一辆油箱容量无限的的汽车，从第 i 个加油站开往第 i+1 个加油站需要消耗汽油 cost[i] 升。你从其中的一个加油站出发，开始时油箱为空。
//
//如果你可以绕环路行驶一周，则返回出发时加油站的编号，否则返回 -1。
//
//说明:
//
//如果题目有解，该答案即为唯一答案。
//输入数组均为非空数组，且长度相同。
//输入数组中的元素均为非负数。
//示例 1:
//
//输入:
//gas  = [1,2,3,4,5]
//cost = [3,4,5,1,2]
//
//输出: 3
//
//解释:
//从 3 号加油站(索引为 3 处)出发，可获得 4 升汽油。此时油箱有 = 0 + 4 = 4 升汽油
//开往 4 号加油站，此时油箱有 4 - 1 + 5 = 8 升汽油
//开往 0 号加油站，此时油箱有 8 - 2 + 1 = 7 升汽油
//开往 1 号加油站，此时油箱有 7 - 3 + 2 = 6 升汽油
//开往 2 号加油站，此时油箱有 6 - 4 + 3 = 5 升汽油
//开往 3 号加油站，你需要消耗 5 升汽油，正好足够你返回到 3 号加油站。
//因此，3 可为起始索引。
//示例 2:
//
//输入:
//gas  = [2,3,4]
//cost = [3,4,3]
//
//输出: -1
//
//解释:
//你不能从 0 号或 1 号加油站出发，因为没有足够的汽油可以让你行驶到下一个加油站。
//我们从 2 号加油站出发，可以获得 4 升汽油。 此时油箱有 = 0 + 4 = 4 升汽油
//开往 0 号加油站，此时油箱有 4 - 3 + 2 = 3 升汽油
//开往 1 号加油站，此时油箱有 3 - 3 + 3 = 3 升汽油
//你无法返回 2 号加油站，因为返程需要消耗 4 升汽油，但是你的油箱只有 3 升汽油。
//因此，无论怎样，你都不可能绕环路行驶一周。

package array

// （1）如果总的耗油量大于总的加油量，肯定无解
// （2）如果加油站的加油量小于到下一个加油站的耗油量肯定不是起点
// （3）在（2）的前提下，如果到起始加油站A到某加油站B无法到达，则A到B之间的加油站都不可能到达B
func canCompleteCircuit(gas []int, cost []int) int {
	var curGas, res, total int
	for i := 0; i < len(gas); i++ {
		total += gas[i] - cost[i]
		curGas += gas[i] - cost[i]
		if curGas < 0 {
			res = i + 1
			curGas = 0
		}
	}
	if total < 0 {
		return -1
	}
	return res
}

//func canCompleteCircuit(gas []int, cost []int) int {
//    lenGas := len(gas)
//    if lenGas == 0 {
//        return 0
//    }
//
//    loop:
//    for i := 0; i < lenGas; i ++ {
//        gasSum := 0
//        for j := i; j < lenGas; j ++ {
//            gasSum += gas[j] - cost[j]
//            if gasSum < 0 {
//                continue loop
//            }
//        }
//        for j := 0; j < i; j ++ {
//            gasSum += gas[j] - cost[j]
//            if gasSum < 0 {
//                continue loop
//            }
//        }
//        return i
//    }
//    return -1
//}
